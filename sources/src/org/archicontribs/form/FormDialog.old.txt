package org.archicontribs.form;

import java.awt.Toolkit;
import java.text.Collator;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;

import org.apache.log4j.Level;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import com.archimatetool.editor.model.commands.NonNotifyingCompoundCommand;
import com.archimatetool.model.IArchimateElement;
import com.archimatetool.model.IArchimateModel;
import com.archimatetool.model.IArchimateRelationship;
import com.archimatetool.model.IDiagramModel;
import com.archimatetool.model.IDiagramModelArchimateConnection;
import com.archimatetool.model.IDiagramModelArchimateObject;
import com.archimatetool.model.IFolder;
import com.archimatetool.model.INameable;
import com.florianingerl.util.regex.Pattern;


 
    /**
     * Create TableItems in the Table control<br>
     * <br>
     * called by the createTable() method
     * 
     * @param table
     *            the table in which the tableItems will be creates
     * @param list
     *            the list of objects corresponding to the tableItems to create
     * @param values
     *            the JSON array representing the variables used to fill in the
     *            tableItem columns
     * @param filter
     *            the JSONObject representing a filter if any
     */
    /*
    @SuppressWarnings("unchecked")
    private void addTableItems(Table table, EList<?> list, JSONArray values, JSONObject filter) throws RuntimeException {
        if ((list == null) || list.isEmpty())
            return;

        if (list.get(0) instanceof IDiagramModelObject) {
            for (IDiagramModelObject diagramObject : (EList<IDiagramModelObject>) list) {
                if (logger.isTraceEnabled())
                    logger.trace("Found diagram object " + diagramObject.getName());
                if (checkFilter(diagramObject, filter)) {
                    if (diagramObject instanceof IDiagramModelArchimateObject)
                        addTableItem(table, (EObject) (((IDiagramModelArchimateObject) diagramObject).getArchimateElement()), values);
                    else
                        addTableItem(table, (EObject) diagramObject, values);
                }

                addTableItems(table, diagramObject.getSourceConnections(), values, filter);

                if (diagramObject instanceof IDiagramModelArchimateObject) {
                    addTableItems(table, ((IDiagramModelArchimateObject) diagramObject).getChildren(), values, filter);
                }
            }
        } else
            if (list.get(0) instanceof IDiagramModelArchimateConnection) {
                for (IDiagramModelArchimateConnection diagramConnection : (EList<IDiagramModelArchimateConnection>) list) {
                    if (logger.isTraceEnabled())
                        logger.trace("Found diagram connection " + diagramConnection.getName());
                    if (checkFilter(diagramConnection, filter)) {
                        addTableItem(table, (EObject) diagramConnection.getArchimateRelationship(), values);
                    }
                }
            } else
                if (list.get(0) instanceof IArchimateElement) {
                    for (IArchimateElement element : (EList<IArchimateElement>) list) {
                        if (logger.isTraceEnabled())
                            logger.trace("Found element " + element.getName());
                        if (checkFilter(element, filter)) {
                            addTableItem(table, element, values);
                        }
                    }
                } else
                    if (list.get(0) instanceof IArchimateRelationship) {
                        for (IArchimateRelationship relation : (EList<IArchimateRelationship>) list) {
                            if (logger.isTraceEnabled())
                                logger.trace("Found relationship " + relation.getName());
                            if (checkFilter(relation, filter)) {
                                addTableItem(table, relation, values);
                            }
                        }
                    } else
                        if (list.get(0) instanceof IDiagramModel) {
                            for (IDiagramModel view : (EList<IDiagramModel>) list) {
                                if (logger.isTraceEnabled())
                                    logger.trace("Found diagram model " + view.getName());
                                if (checkFilter(view, filter)) {
                                    addTableItem(table, view, values);
                                }
                            }
                        } else {
                        	if ( !(list.get(0) instanceof IDiagramModelConnection) ) {
                        		throw new RuntimeException(FormPosition.getPosition("lines") + "\n\nFailed to generate lines for unknown object class \"" + list.get(0).getClass().getSimpleName() + "\"");
                        	}
                        }
    }
    */

    /**
     * Adds a line (TableItem) in the Table<br>
     * 
     * @param table
     *            the table in which create the lines
     * @param jsonArray
     *            the array of JSONObjects that contain the values to insert
     *            (one per column)
     */
    /*
    private void addTableItem(Table table, EObject eObject, JSONArray jsonArray) throws RuntimeException {
        TableItem tableItem = new TableItem(table, SWT.NONE);
        EObject referedEObject;
        String unscoppedVariable;

        // we need to store the widgets to retreive them later on
        TableEditor[] editors = new TableEditor[jsonArray.size()];

        logger.trace("   adding line for " + eObject.getClass().getSimpleName() + " \"" + (((INameable) eObject).getName() == null ? "" : ((INameable) eObject).getName()) + "\"");

        for (int columnNumber = 0; columnNumber < jsonArray.size(); ++columnNumber) {
            TableColumn tableColumn = table.getColumn(columnNumber);
            String variableName = (String) jsonArray.get(columnNumber);
            String itemText = FormVariable.expand(variableName, eObject); 

            TableEditor editor;
            switch (((String)tableColumn.getData("class")).toLowerCase()) {
                case "label":
                    logger.trace("      adding label cell with value \"" + itemText + "\"");
                    editor = new TableEditor(table);
                    Label label = new Label(table, SWT.WRAP);
                    label.setText(itemText);
                    editor.grabHorizontal = true;
                    editor.setEditor(label, tableItem, columnNumber);
                    label.setAlignment((int)tableColumn.getData("alignment"));
                    if ( tableColumn.getData("foreground") != null ) {
                        label.setForeground((Color)tableColumn.getData("foreground"));
                    }
                    if ( tableColumn.getData("background") != null ) {
                        label.setBackground((Color)tableColumn.getData("background"));
                    }
                    editors[columnNumber] = editor;
                    // We reference the variable and the control to the eObject that the variable refers to
                    referedEObject = FormVariable.getReferedEObject(variableName, eObject);
                    unscoppedVariable = FormVariable.getUnscoppedVariable(variableName, eObject);
                    formVarList.set(referedEObject, unscoppedVariable, label);
                    break;

                case "text":
                    editor = new TableEditor(table);
                    StyledText text = new StyledText(table, SWT.WRAP);
                    if ( !FormPlugin.isEmpty((String)tableColumn.getData("default")) && (itemText.isEmpty()) || (boolean)tableColumn.getData("forceDefault") ) {
                        itemText = FormVariable.expand((String)tableColumn.getData("default"), eObject);
                    }
                    logger.trace("      adding text cell with value \"" + itemText + "\"");
                    text.setAlignment((int)tableColumn.getData("alignment"));
                    text.setText(itemText);
                    text.setToolTipText((String)tableColumn.getData("tooltip"));
                    
                    if ( tableColumn.getData("foreground") != null ) {
                        text.setForeground((Color)tableColumn.getData("foreground"));
                    }
                    if ( tableColumn.getData("background") != null ) {
                        text.setBackground((Color)tableColumn.getData("background"));
                    }
                    
                    // We reference the variable and the control to the eObject that the variable refers to
                    referedEObject = FormVariable.getReferedEObject(variableName, eObject);
                    unscoppedVariable = FormVariable.getUnscoppedVariable(variableName, eObject);
                    text.setData("eObject", referedEObject);
                    text.setData("variable", unscoppedVariable);
                    text.setData("whenEmpty", tableColumn.getData("whenEmpty"));
                    formVarList.set(referedEObject, unscoppedVariable, text);

                    if ( !FormPlugin.isEmpty((String)table.getColumn(columnNumber).getData("tooltip")) ) {
                        text.setToolTipText(FormVariable.expand((String) table.getColumn(columnNumber).getData("tooltip"), eObject));
                    } else {
                        if ( !FormPlugin.isEmpty((String)table.getColumn(columnNumber).getData("regexp")) ) {
                            String regex = (String) table.getColumn(columnNumber).getData("regexp");
                            text.setData("pattern", Pattern.compile(regex));
                            text.setToolTipText("Your text should match the following regex :\n" + regex);
                        }
                    }
                    
                    editor.grabHorizontal = true;
                    editor.setEditor(text, tableItem, columnNumber);
                    editors[columnNumber] = editor;
                    
                    text.addModifyListener(textModifyListener);
                    break;

                case "combo":
                    editor = new TableEditor(table);
                    CCombo combo = new CCombo(table, SWT.NONE);
                    if (itemText.isEmpty()) {
                        if ( !FormPlugin.isEmpty((String)tableColumn.getData("default")) )
                            itemText = (String)tableColumn.getData("default");
                    }
                    logger.trace("      adding combo cell with value \"" + itemText + "\"");
                    combo.setText(itemText);
                    combo.setItems((String[])tableColumn.getData("values"));
                    combo.setToolTipText((String)tableColumn.getData("tooltip"));
                    
                    if ( tableColumn.getData("foreground") != null ) {
                        combo.setForeground((Color)tableColumn.getData("foreground"));
                    }
                    if ( tableColumn.getData("background") != null ) {
                        combo.setBackground((Color)tableColumn.getData("background"));
                    }
                    
                    // We reference the variable and the control to the eObject that the variable refers to
                    referedEObject = FormVariable.getReferedEObject(variableName, eObject);
                    unscoppedVariable = FormVariable.getUnscoppedVariable(variableName, eObject);
                    combo.setData("eObject", referedEObject);
                    combo.setData("variable", unscoppedVariable);
                    combo.setData("whenEmpty", tableColumn.getData("whenEmpty"));
                    formVarList.set(referedEObject, unscoppedVariable, combo);
                    Boolean editable = (Boolean)tableColumn.getData("editable");
                    combo.setEditable(editable != null && editable);

                    if ( !FormPlugin.isEmpty((String)tableColumn.getData("tooltip")) ) {
                        combo.setToolTipText(FormVariable.expand((String)tableColumn.getData("tooltip"), eObject));
                    }

                    editor.grabHorizontal = true;
                    editor.setEditor(combo, tableItem, columnNumber);
                    editors[columnNumber] = editor;
                    combo.addModifyListener(textModifyListener);
                    break;

                case "check":
                    editor = new TableEditor(table);
                    Button check = new Button(table, SWT.CHECK);
                    check.pack();
                    editor.minimumWidth = check.getSize().x;
                    editor.horizontalAlignment = SWT.CENTER;
                    check.setAlignment((int)tableColumn.getData("alignment"));
                    
                    // We reference the variable and the control to the eObject that the variable refers to
                    referedEObject = FormVariable.getReferedEObject(variableName, eObject);
                    unscoppedVariable = FormVariable.getUnscoppedVariable(variableName, eObject);
                    check.setData("eObject", referedEObject);
                    check.setData("variable", unscoppedVariable);
                    check.setData("whenEmpty", tableColumn.getData("whenEmpty"));
                    formVarList.set(referedEObject, unscoppedVariable, check);
                    
                    if ( tableColumn.getData("foreground") != null ) {
                        check.setForeground((Color)tableColumn.getData("foreground"));
                    }
                    if ( tableColumn.getData("background") != null ) {
                        check.setBackground((Color)tableColumn.getData("background"));
                    }
                    
                    String[] values = (String[])tableColumn.getData("values");
                    String defaultValue = (String)tableColumn.getData("default");
                    
                    if ( values == null || values.length == 0 ) {
                        check.setData("values", null);
                        check.setSelection(Boolean.valueOf((itemText.isEmpty() || (boolean)tableColumn.getData("forceDefault"))?defaultValue:itemText));
                        logger.trace("      adding check cell with value \"" + Boolean.valueOf((itemText.isEmpty() || (boolean)tableColumn.getData("forceDefault"))?defaultValue:itemText) + "\"");
                    } else {
                        check.setData("values", values);
                        check.setSelection(values[0].equals((itemText.isEmpty() || (boolean)tableColumn.getData("forceDefault"))?defaultValue:itemText));
                        logger.trace("      adding check cell with value \"" + values[0].equals((itemText.isEmpty() || (boolean)tableColumn.getData("forceDefault"))?defaultValue:itemText) + "\"");
                    }
                    check.pack();

                    if ( !FormPlugin.isEmpty((String)tableColumn.getData("tooltip")) ) {
                        check.setToolTipText(FormVariable.expand((String)tableColumn.getData("tooltip"), eObject));
                    }

                    check.addSelectionListener(checkButtonSelectionListener);

                    editor.setEditor(check, tableItem, columnNumber);
                    editors[columnNumber] = editor;
                    break;

                default:
                    throw new RuntimeException(FormPosition.getPosition("lines") + "\n\nFailed to add table item for unknown object class \"" + ((String)tableColumn.getData("class")) + "\"");
            }
        }
        tableItem.setData("editors", editors);
    }
    */







    ModifyListener textModifyListener = new ModifyListener() {
        public void modifyText(ModifyEvent e) {
        	if ( logger.isTraceEnabled() ) logger.trace("calling textModifyListener");
        	
            updateWidget((Control)e.widget);
        }
    };
    
    SelectionListener checkButtonSelectionListener = new SelectionListener(){
        @Override public void widgetSelected(SelectionEvent e) {
            updateWidget((Control)e.widget);
        }

        @Override public void widgetDefaultSelected(SelectionEvent e) {
            widgetSelected(e);
        }
    };
    
    private void updateWidget(Control control) {
    	String unscoppedVariable = (String)control.getData("variable");
        EObject referedEObject = (EObject)control.getData("eObject");
    	String content;
    	
    	switch ( control.getClass().getSimpleName() ) {
    		case "Button":
    			String[]values = (String[])control.getData("values");
    			if ( values == null )
    			    content = null;
    			else
    			    content = values[((Button)control).getSelection()?0:1];
    			break;
    		
    		case "StyledText":
                content = ((StyledText)control).getText();
                break;
                
    		case "CCombo":
    			content = ((CCombo)control).getText();
                break;
                
            default:
                throw new RuntimeException("Do not know how to update "+control.getClass().getSimpleName()+" control.");
    	}

        for ( Control otherControl: formVarList.getControls(referedEObject, unscoppedVariable)) {
            if ( otherControl == control ) {
                if (logger.isTraceEnabled()) logger.trace("same combo - ignored");
            } else {
                if (logger.isTraceEnabled()) logger.trace("updating "+otherControl);
                
                switch (control.getClass().getSimpleName()) {
                    case "CCombo":
                        CCombo combo = ((CCombo)otherControl);

                    	combo.removeModifyListener(textModifyListener);
                        combo.setText(content);
                        combo.addModifyListener(textModifyListener);
                        break;
    
                    case "Button":
                    	Button button= (Button)otherControl;

                    	String[]values = (String[])button.getData("values");
                        
                        button.removeSelectionListener(checkButtonSelectionListener);
                        if ( values == null )
                            button.setSelection(((Button)control).getSelection());
                        else
                            button.setSelection(FormPlugin.areEqual(content, values[1]));       // any other value than values[1] implies the button is unchecked
                        button.addSelectionListener(checkButtonSelectionListener);
                        break;
    
                    case "Label":
                        ((Label)otherControl).setText(content);
                        break;
    
                    case "StyledText":
                        StyledText text = (StyledText)otherControl;
                        
                        text.removeModifyListener(textModifyListener);
                        text.setText(content);
                        Pattern pattern = (Pattern)text.getData("pattern");		               // if a regex has been provided, we change the text color to show if it matches
                        if ( pattern != null ) {
                        	text.setStyleRange(new StyleRange(0, content.length(), pattern.matcher(content).matches() ? goodValueColor : badValueColor, null));
                        }
                        text.addModifyListener(textModifyListener);
                        break;
                }
            }
    }
    }

    private Listener sortListener=new Listener() {
        public void handleEvent(Event e) {
            // Because of the graphical controls and the tableEditors, it is much more easier and quicker to create a new table rather than add new tableItems and removing the old ones
            Table oldTable=((TableColumn)e.widget).getParent();TableColumn sortedColumn=(TableColumn)e.widget;oldTable.setSortColumn(sortedColumn);Integer sortDirection=(Integer)sortedColumn.getData("sortDirection");if(sortDirection==null||sortDirection==SWT.DOWN)sortDirection=SWT.UP;else sortDirection=SWT.DOWN;sortedColumn.setData("sortDirection",sortDirection);logger.trace("set sort direction "+sortDirection);oldTable.setSortDirection(sortDirection);
            TableItem[]oldTableItems=oldTable.getItems();

            if( (oldTableItems!=null) && (oldTableItems.length>0) ) {
                Table newTable = new Table(oldTable.getParent(),oldTable.getStyle());
                newTable.setLinesVisible(oldTable.getLinesVisible());
                newTable.setHeaderVisible(oldTable.getHeaderVisible());
                newTable.setLocation(oldTable.getLocation());
                newTable.setSize(oldTable.getSize());
                newTable.setLayoutData(oldTable.getLayoutData());
                newTable.setLayout(oldTable.getLayout());

                for(TableColumn oldTableColumn: oldTable.getColumns()) {
                    TableColumn newTableColumn = new TableColumn(newTable,SWT.NONE);
                    newTableColumn.setText(oldTableColumn.getText());
                    newTableColumn.setAlignment(oldTableColumn.getAlignment());
                    newTableColumn.setWidth(oldTableColumn.getWidth());
                    newTableColumn.setResizable(oldTableColumn.getResizable());
                    newTableColumn.setData("class",oldTableColumn.getData("class"));
                    newTableColumn.setData("tooltip",oldTableColumn.getData("tooltip"));
                    newTableColumn.setData("values",oldTableColumn.getData("values"));
                    newTableColumn.setData("regexp",oldTableColumn.getData("regexp"));
                    newTableColumn.setData("excelColumn",oldTableColumn.getData("excelColumn"));
                    newTableColumn.setData("excelCellType",oldTableColumn.getData("excelCellType"));
                    newTableColumn.setData("excelDefault",oldTableColumn.getData("excelDefault"));
                    newTableColumn.setData("sortDirection",oldTableColumn.getData("sortDirection"));
                    newTableColumn.addListener(SWT.Selection,sortListener);
                    newTableColumn.setImage(oldTableColumn.getImage());

                    if( oldTableColumn == oldTable.getSortColumn() ) {
                        newTable.setSortColumn(newTableColumn);
                        newTable.setSortDirection(oldTable.getSortDirection());
                    }
                }

                Arrays.sort(oldTableItems,new TableItemComparator(oldTable.indexOf(sortedColumn),sortDirection));

                for(TableItem oldTableItem:oldTableItems) {
                    TableEditor[]oldEditors = (TableEditor[])oldTableItem.getData("editors");
                    TableEditor[]newEditors = new TableEditor[oldEditors.length];

                    TableItem newTableItem = new TableItem(newTable,SWT.NONE);

                    for ( int column=0; column < oldTable.getColumnCount(); ++column) {
                        TableEditor newEditor = new TableEditor(newTable);
                        switch (oldEditors[column].getEditor().getClass().getSimpleName()) {
                            case"Label":
                                Label oldLabel = (Label)oldEditors[column].getEditor();
                                Label newLabel = new Label(newTable,SWT.WRAP|SWT.NONE);

                                newLabel.setText(oldLabel.getText());
                                newLabel.setToolTipText(oldLabel.getToolTipText());
                                newLabel.setAlignment(oldLabel.getAlignment());
                                newLabel.setData("eObject",oldLabel.getData("eObject"));
                                newLabel.setData("variable",oldLabel.getData("variable"));
                                newLabel.setData("pattern",oldLabel.getData("pattern"));
                                
                                newEditor.grabHorizontal=true;
                                newEditor.setEditor(newLabel,newTableItem,column);
                                
                                formVarList.replaceControl(oldLabel, newLabel);
                                break;
                            
                            case"StyledText":
                                StyledText oldText = (StyledText)oldEditors[column].getEditor();
                                StyledText newText = new StyledText(newTable,SWT.WRAP|SWT.NONE);
  
                                newText.setText(oldText.getText());
                                newText.setToolTipText(oldText.getToolTipText());
                                newText.setAlignment(oldText.getAlignment());
                                newText.setData("eObject",oldText.getData("eObject"));
                                newText.setData("variable",oldText.getData("variable"));
                                newText.setData("pattern",oldText.getData("pattern"));

                                newEditor.grabHorizontal=true;
                                newEditor.setEditor(newText,newTableItem,column);
                                
                                newText.addModifyListener(textModifyListener);
                                formVarList.replaceControl(oldText, newText);
                                break;

                            case"CCombo":
                                CCombo oldCombo=(CCombo)oldEditors[column].getEditor();
                                CCombo newCombo=new CCombo(newTable,SWT.NONE);

                                newCombo.setText(oldCombo.getText());
                                newCombo.setItems(oldCombo.getItems());
                                newCombo.setToolTipText(oldCombo.getToolTipText());
                                newCombo.setData("eObject",oldCombo.getData("eObject"));
                                newCombo.setData("variable",oldCombo.getData("variable"));
                                newCombo.setEditable(false);newEditor.grabHorizontal=true;
                                
                                newEditor.grabHorizontal=true;
                                newEditor.setEditor(newCombo,newTableItem,column);
                                
                                newCombo.addModifyListener(textModifyListener);
                                formVarList.replaceControl(oldCombo, newCombo);
                                break;

                            case"Button":
                                Button oldButton=(Button)oldEditors[column].getEditor();
                                Button newButton=new Button(newTable,SWT.CHECK);

                                newButton.pack();
                                newEditor.minimumWidth=newButton.getSize().x;
                                newEditor.horizontalAlignment=SWT.CENTER;
                                newButton.setAlignment(oldButton.getAlignment());
                                newButton.setData("eObject",oldButton.getData("eObject"));
                                newButton.setData("variable",oldButton.getData("variable"));
                                newButton.setData("values",oldButton.getData("values"));
                                newButton.setSelection(oldButton.getSelection());
                                newButton.addSelectionListener(checkButtonSelectionListener);
                                
                                newEditor.grabHorizontal=true;
                                newEditor.setEditor(newButton,newTableItem,column);
                                
                                newButton.addSelectionListener(checkButtonSelectionListener);
                                formVarList.replaceControl(oldButton, newButton);
                        }
                        newEditors[column]=newEditor;
                    }
                    newTableItem.setData("editors",newEditors);
                }

                logger.debug("Replacing old table with new table");newTable.setVisible(true);oldTable.dispose();}
        }
    };

    private void cancel() {
        if (logger.isDebugEnabled())
            logger.debug("Cancel button selected by user.");
        formDialog.dispose();
    }

    private void ok() {
        if (logger.isDebugEnabled())
            logger.debug("Ok button selected by user.");
        CompoundCommand compoundCommand = new NonNotifyingCompoundCommand();
        try {
            for (Control control : formDialog.getChildren()) {
                save(control);
            }
        } catch (RuntimeException e) {
            popup(Level.ERROR, "Failed to save variables.", e);
            return;
        }

        IArchimateModel model;

        if (selectedObject instanceof IArchimateModel) {
            model = ((IArchimateModel) selectedObject).getArchimateModel();
        } else if (selectedObject instanceof IDiagramModel) {
            model = ((IDiagramModel) selectedObject).getArchimateModel();
        } else if (selectedObject instanceof IDiagramModelArchimateObject) {
            model = ((IDiagramModelArchimateObject) selectedObject).getDiagramModel().getArchimateModel();
        } else if (selectedObject instanceof IDiagramModelArchimateConnection) {
            model = ((IDiagramModelArchimateConnection) selectedObject).getDiagramModel().getArchimateModel();
        } else if (selectedObject instanceof IArchimateElement) {
            model = ((IArchimateElement) selectedObject).getArchimateModel();
        } else if (selectedObject instanceof IArchimateRelationship) {
            model = ((IArchimateRelationship) selectedObject).getArchimateModel();
        } else if (selectedObject instanceof IFolder) {
            model = ((IFolder) selectedObject).getArchimateModel();
        } else {
            popup(Level.ERROR, "Failed to get the model.");
            return;
        }

        CommandStack stack = (CommandStack) model.getAdapter(CommandStack.class);
        stack.execute(compoundCommand);

        formDialog.dispose();
    }



    private class TableItemComparator implements Comparator<TableItem> {
        int columnIndex   = 0;
        int sortDirection = SWT.UP;

        public TableItemComparator(int columnIndex, int sortDirection) {
            this.columnIndex = columnIndex;
            this.sortDirection = sortDirection;
        }

        public int compare(TableItem first, TableItem second) {
            TableEditor[] editorsFirst = (TableEditor[]) first.getData("editors");

            if (editorsFirst[columnIndex] != null) {
                TableEditor[] editorsSecond = (TableEditor[]) second.getData("editors");

                switch (editorsFirst[columnIndex].getEditor().getClass().getSimpleName()) {
                    case "StyledText":
                        logger.trace("comparing \"" + ((StyledText) editorsFirst[columnIndex].getEditor()).getText() + "\" and \"" + ((StyledText) editorsSecond[columnIndex].getEditor()).getText() + "\"");
                        return Collator.getInstance().compare(((StyledText) editorsFirst[columnIndex].getEditor()).getText(), ((StyledText) editorsSecond[columnIndex].getEditor()).getText()) * (sortDirection == SWT.UP ? 1 : -1);
                    case "Button":
                        logger.trace("comparing \"" + ((Button) editorsFirst[columnIndex].getEditor()).getSelection()
                                + "\" and \"" + ((Button) editorsSecond[columnIndex].getEditor()).getSelection()
                                + "\"");
                        return Collator.getInstance().compare(((Button) editorsFirst[columnIndex].getEditor()).getSelection(), ((Button) editorsSecond[columnIndex].getEditor()).getSelection())* (sortDirection == SWT.UP ? 1 : -1);

                    case "CCombo":
                        logger.trace("comparing \"" + ((CCombo) editorsFirst[columnIndex].getEditor()).getText() + "\" and \"" + ((CCombo) editorsSecond[columnIndex].getEditor()).getText() + "\"");
                        return Collator.getInstance().compare(((CCombo) editorsFirst[columnIndex].getEditor()).getText(), ((CCombo) editorsSecond[columnIndex].getEditor()).getText()) * (sortDirection == SWT.UP ? 1 : -1);

                    default:
                        throw new RuntimeException("Do not know how to compare elements of class " + editorsFirst[columnIndex].getClass().getSimpleName());
                }
            }

            return Collator.getInstance().compare(first.getText(columnIndex), second.getText(columnIndex)) * (sortDirection == SWT.UP ? 1 : -1);
        }
    }




}
